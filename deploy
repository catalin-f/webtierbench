#!/usr/bin/env python
from _base import WEBTIER_VERSION
from _base import debugLogger
from _base import masterLogger
from _base import detect_os
from _base import Deployment
from _base import pickle_deployment
from _base import get_args
from _base import json_parse_setup
from _apps import Apache2
from _apps import Perf
from _apps import ApacheBenchmark

#debug
from pprint import pprint


def main():
    debugLogger("WebTier Benchmark version: %s" % WEBTIER_VERSION)
    masterLogger("WebTier Benchmark version: %s" % WEBTIER_VERSION)

    #DEBUG IONEL start
    #
    print "\n** IOnel test start \n**"
    #TODO: read command line params
    setup, benchmark = get_args()

    print setup

    
    #TODO: parse JSON and save it to .deployment.json
    #TODO: check "setup" to be valid
    if setup is not None:
        data = json_parse_setup(setup)
        pprint(data)

    print "\n** IOnel test ENDED **\n"
    #DEBUG IONEL start

    distribution, version = detect_os()
    debugLogger("Host OS distribution: %s" % distribution)
    debugLogger("Host OS version: %s" % version)

    deployment = Deployment('mydeployment', distribution, version)

    out, err = deployment.common_host_setup()
    debugLogger("Common host setup stdout: %s" % out)
    debugLogger("Common host setup stderr: %s" % err)

    #TODO notify user to reboot station
    if deployment.reboot_required():
        print("These settings need a reboot! Please reboot the machine and run the deploy command again!")
        return 0

    apacheConfig = {
        "ip": "localhost",
        "port": "80"
    }
    abConfig = {
        "workers": 4,
        "requests": "1000",
        "endpoint": "http://localhost:80/index.html"
    }
    apache = Apache2(apacheConfig, distribution, version)
    perf = Perf({}, distribution, version)
    ab = ApacheBenchmark(abConfig, distribution, version)


    deployment.add_application(apache)
    debugLogger("Added application: apache2")

    deployment.add_perf(perf)
    debugLogger("Added performance measurement: perf")

    deployment.set_client(ab)
    debugLogger("Benchmark client: ab")

    out, err = deployment.deploy()
    debugLogger("Deployment stdout: %s " % out)
    debugLogger("Deployment stderr: %s " % err)

    pickle_deployment(deployment)
    debugLogger("Pickled deployment data")


if __name__ == '__main__':
    main()
