#!/usr/bin/env python
from _base import WEBTIER_PUBLIC_INFO
from _base import debugLogger
from _base import masterLogger
from _base import consoleLogger
from _base import Platform
from _base import Deployment
from _base import pickle_deployment
from _base import parse_deploy_args
from _base import load_deploy_configuration
from _base import save_deploy_configuration
from _base import root_access
from _apps import Apache2
from _apps import Perf
from _apps import ApacheBenchmark
from _apps import Django
from _apps import Wordpress
from _apps import Siege
from _apps import Memcached
from _apps import Cassandra
from _apps import MariaDb
from _apps import Sar
from _apps import Statsd
import sys


def main():
    # Check for root access
    if not root_access():
        consoleLogger("Please run this as root!")
        sys.exit(1)

    # Initialize log files
    debugLogger("%s (deploy)" % WEBTIER_PUBLIC_INFO)
    masterLogger("%s (deploy)" % WEBTIER_PUBLIC_INFO)

    # Read command line params
    setup_json_filename = parse_deploy_args()

    # Parse JSON and save it locally
    config_json = load_deploy_configuration(setup_json_filename)
    save_deploy_configuration(config_json)

    myplatform = Platform()
    myplatform.detect()
    debugLogger("Host OS distribution: %s" % myplatform.distribution)
    debugLogger("Host OS version: %s" % myplatform.version)

    # Create deployment environment
    deployment = Deployment('mydeployment', config_json, myplatform)

    out, err = deployment.common_host_setup()
    debugLogger("Common host setup stdout: %s" % out)
    debugLogger("Common host setup stderr: %s" % err)

    # Notify user to reboot station
    if deployment.reboot_required():
        consoleLogger("These settings need a reboot! Please reboot the machine(s) and run the deploy command again!")
        sys.exit(0)

    # Get the configuration for each app from config_json and pass it in the constructor
    ###############################################################################
    # Applications
    ###############################################################################
    if config_json['workload']['name'] == 'django':
        django = Django(config_json['workload'], myplatform)
        deployment.add_application(django)
        debugLogger("Added application: %s" % config_json['workload']['name'])
    if config_json['workload']['name'] == 'apache2':
        apache = Apache2(config_json['workload'], myplatform)
        deployment.add_application(apache)
        debugLogger("Added application: %s" % config_json['workload']['name'])
    if config_json['workload']['name'] == 'wordpress':
        wordpress = Wordpress(config_json['workload'], myplatform)
        deployment.add_application(wordpress)
        debugLogger("Added application: %s" % config_json['workload']['name'])

    ###############################################################################
    # Benchmark clients
    ###############################################################################
    if config_json['client']['name'] == 'siege':
        siege = Siege(config_json['client'], myplatform)
        deployment.set_client(siege)
        debugLogger("Added benchmark client: %s" % config_json['client']['name'])
    if config_json['client']['name'] == 'ab':
        ab = ApacheBenchmark(config_json['client'], myplatform)
        deployment.set_client(ab)
        debugLogger("Added benchmark client: %s" % config_json['client']['name'])

    ###############################################################################
    # Caching
    ###############################################################################
    for config in config_json['cache']:
        if config['name'] == 'memcached':
            memcached = Memcached(config, myplatform)
            deployment.add_cache(memcached)
            debugLogger("Added caching server: %s " % config['name'])

    ###############################################################################
    # Databases
    ###############################################################################
    for config in config_json['db']:
        if config['name'] == 'cassandra':
            cassandra = Cassandra(config, myplatform)
            deployment.add_db(cassandra)
            debugLogger("Added db server: %s " % config['name'])
        if config['name'] == 'mariadb':
            mariadb = MariaDb(config, myplatform)
            deployment.add_db(mariadb)
            debugLogger("Added db server: %s " % config['name'])

    ###############################################################################
    # Performance measurements
    ###############################################################################
    for config in config_json['perf']:
        if config['name'] == 'perf':
            perf = Perf(config, myplatform)
            deployment.add_perf(perf)
            debugLogger("Added performance measurement: %s " % config['name'])
        if config['name'] == 'sar':
            sar = Sar(config, myplatform)
            deployment.add_perf(sar)
            debugLogger("Added performance measurement: %s " % config['name'])
        if config['name'] == 'statsd':
            statsd = Statsd(config, myplatform)
            deployment.add_perf(statsd)
            debugLogger("Added performance measurement: %s " % config['name'])

    # Deploy everything
    out, err = deployment.deploy()
    debugLogger("Deployment stdout: %s " % out)
    debugLogger("Deployment stderr: %s " % err)

    # Save deployment environment
    pickle_deployment(deployment)
    debugLogger("Pickled deployment data")


if __name__ == '__main__':
    main()
