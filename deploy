#!/usr/bin/env python
from _base import WEBTIER_PUBLIC_INFO
from _base import debugLogger
from _base import masterLogger
from _base import consoleLogger
from _base import Platform
from _base import Deployment
from _base import pickle_deployment
from _base import parse_deploy_args
from _base import load_deploy_configuration
from _base import save_deploy_configuration
from _apps import Apache2
from _apps import Perf
from _apps import ApacheBenchmark
import sys


def main():
    debugLogger("%s (deploy)" % WEBTIER_PUBLIC_INFO)
    masterLogger("%s (deploy)" % WEBTIER_PUBLIC_INFO)

    # Read command line params
    setup_json_filename = parse_deploy_args()

    # Parse JSON and save it locally
    config_json = load_deploy_configuration(setup_json_filename)
    save_deploy_configuration(config_json)

    myplatform = Platform()
    myplatform.detect()
    debugLogger("Host OS distribution: %s" % myplatform.distribution)
    debugLogger("Host OS version: %s" % myplatform.version)

    # Create deployment environment
    deployment = Deployment('mydeployment', myplatform)

    out, err = deployment.common_host_setup()
    debugLogger("Common host setup stdout: %s" % out)
    debugLogger("Common host setup stderr: %s" % err)

    # Notify user to reboot station
    if deployment.reboot_required():
        consoleLogger("These settings need a reboot! Please reboot the machine(s) and run the deploy command again!")
        sys.exit(0)

    #TODO get the configuration for each app from config_json and pass it in the constructor
    apacheConfig = {
        "ip": "localhost",
        "port": "80"
    }
    abConfig = {
        "workers": 4,
        "requests": "1000",
        "endpoint": "http://localhost:80/index.html"
    }
    apache = Apache2(apacheConfig, myplatform)
    perf = Perf({}, myplatform)
    ab = ApacheBenchmark(abConfig, myplatform)


    deployment.add_application(apache)
    debugLogger("Added application: apache2")

    deployment.add_perf(perf)
    debugLogger("Added performance measurement: perf")

    deployment.set_client(ab)
    debugLogger("Benchmark client: ab")

    out, err = deployment.deploy()
    debugLogger("Deployment stdout: %s " % out)
    debugLogger("Deployment stderr: %s " % err)

    # Save deployment environment
    pickle_deployment(deployment)
    debugLogger("Pickled deployment data")


if __name__ == '__main__':
    main()
