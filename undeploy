#!/usr/bin/env python
from _base import WEBTIER_PUBLIC_INFO
from _base import unpickle_deployment
from _base import consoleLogger
from _base import debugLogger
from _base import masterLogger
from _base import Deployment
from _base import Platform
from _base import parse_undeploy_args
from _base import load_deploy_configuration
from _base import root_access
from _base import get_path
import os
import sys


def main():
    # Check for root access
    if not root_access():
        consoleLogger("Please run this as root!")
        sys.exit(1)

    # Get project path
    get_path()

    # Initialize log files
    debugLogger("%s (undeploy)" % WEBTIER_PUBLIC_INFO)
    masterLogger("%s (undeploy)" % WEBTIER_PUBLIC_INFO)

    parse_undeploy_args()

    undeployment = unpickle_deployment()
    debugLogger("Unpickled deployment data")

    #Undeploy everything
    out, err = undeployment.undeploy(undeployment._all_apps, undeployment.perfs)
    debugLogger("Deployment stdout: %s " % out)
    debugLogger("Deployment stderr: %s " % err)

    #TODO add a cleanup method in _base.Deployment
    os.system('rm -f .host.setup.done')
    os.system('rm -f /tmp/.host.reboot.required')
    os.system('rm -f .deployment.pickle')
    os.system('rm -f .deployment.json')
    os.system('rm -f *.log')
    os.system('rm -rf measurements')
    os.system('rm -rf .running.json')
    os.system('rm -rf .cache')
    os.system('rm -rf django-workload')
    os.system('rm -rf oss-performance')
    os.system('rm -rf venv')


if __name__ == '__main__':
    main()
