#!/usr/bin/env python
from _base import Deployment  # do not remove!
from _base import WEBTIER_PUBLIC_INFO
from _base import debugLogger
from _base import masterLogger
from _base import unpickle_deployment
from _base import parse_run_args
from _base import load_run_configuration
from _base import save_run_configuration
import json


def main():
    debugLogger("%s (run)" % WEBTIER_PUBLIC_INFO)
    masterLogger("%s (run)" % WEBTIER_PUBLIC_INFO)

    # Read command line params
    benchmark_json_filename = parse_run_args()

    # Parse JSON and save it locally
    config_json = load_run_configuration(benchmark_json_filename)
    save_run_configuration(config_json)

    # Load deployment environment
    deployment = unpickle_deployment()
    debugLogger("Unpickled deployment data")

    deployment.set_benchmark_config(config_json)
    debugLogger("Benchmark configuration set: %s" % json.dumps(config_json))
    masterLogger("Benchmark configuration set: %s" % json.dumps(config_json))

    out, err = deployment.start_applications()
    debugLogger("Started applications stdout: %s" % out)
    debugLogger("Started applications stderr: %s" % err)

    out, err = deployment.start_performance_measurements()
    debugLogger("Started performance measurements: %s" % out)
    debugLogger("Started performance measurements: %s" % err)

    out, err = deployment.start_benchmark_client()
    debugLogger("Benchmark results stdout: %s" % out)
    debugLogger("Benchmark results stderr: %s" % err)
    masterLogger("Benchmark results: %s %s" % (out, err))

    out, err = deployment.stop_benchmark_client()
    debugLogger("Stopped benchmark stdout: %s" % out)
    debugLogger("Stopped benchmark stderr: %s" % err)

    out, err = deployment.stop_performance_measurements()
    debugLogger("Stopped performance measurements: %s" % out)
    debugLogger("Stopped performance measurements: %s" % err)

    out, err = deployment.stop_applications()
    debugLogger("Stopped applications stdout: %s" % out)
    debugLogger("Stopped applications stderr: %s" % err)

    deployment.collect_performance_data()


if __name__ == '__main__':
    main()
